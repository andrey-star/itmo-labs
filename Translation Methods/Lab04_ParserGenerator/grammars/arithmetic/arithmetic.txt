grammar Arithmetic;

@import {
	import java.lang.Math.*;
	import java.util.function.DoubleUnaryOperator;
	import java.util.function.DoubleBinaryOperator;
	import java.util.Map;
}

@macros {
	private Map<String, DoubleUnaryOperator> unaryOps = Map.of(
			"abs", Math::abs,
			"sqrt", Math::sqrt,
			"log", Math::log
	);
	private Map<String, DoubleBinaryOperator> binaryOps = Map.of(
			"pow", Math::pow,
			"min", Math::min,
			"max", Math::max
	);
}

@lexer {
	PLUS : "\\+" ;
	MINUS : "-" ;
	MUL : "\\*" ;
	DIV : "/" ;
	LPAREN : "\\(" ;
	RPAREN : "\\)" ;
	COMMA : "," ;
	NUM : "[0-9]+" ;
	IDENT : "[a-zA-Z_][a-zA-Z0-9_]*" ;
	_SKIP : "[ \t\r\n]+" ;
}

@parser {
	E() returns [Integer val]
	  : T(){EP2.acc = T1.val;} EP(EP2.acc){E0.val = EP2.val;}
	  ;
	EP(Integer acc) returns [Integer val]
	  : PLUS T(){ EP3.acc = EP0.acc + T2.val; } EP(EP3.acc){EP0.val = EP3.val;}
	  | MINUS T(){ EP3.acc = EP0.acc - T2.val; } EP(EP3.acc){EP0.val = EP3.val;}
	  | _EPS{EP0.val = EP0.acc;}
	  ;
	T() returns [Integer val]
	  : F(){TP2.acc = F1.val;} TP(TP2.acc){T0.val = TP2.val;}
	  ;
	TP(Integer acc) returns [Integer val]
	  : MUL F(){TP3.acc = TP0.acc * F2.val;} TP(TP3.acc){TP0.val = TP3.val;}
	  | DIV F(){TP3.acc = TP0.acc / F2.val;} TP(TP3.acc){TP0.val = TP3.val;}
	  | _EPS{TP0.val = TP0.acc;}
	  ;
	F() returns [Integer val, String call, String fName]
	  : LPAREN E(){F0.val = E2.val;} RPAREN
	  | NUM{F0.val = Integer.parseInt(NUM1.text());}
	  | MINUS F(){F0.val = -F2.val;}
	  | IDENT{F0.fName = IDENT1.text();} LPAREN E() FC(F0.fName, E3.val){F0.val = FC4.val;}
	  ;
	FC(String fName, Integer arg1) returns [Integer val]
	  : COMMA E(){FC0.val = (int) binaryOps.get(fName).applyAsDouble(arg1, E2.val);} RPAREN
	  | RPAREN{FC0.val = (int) unaryOps.get(fName).applyAsDouble(arg1);}
	  ;

}


@start : E val;
