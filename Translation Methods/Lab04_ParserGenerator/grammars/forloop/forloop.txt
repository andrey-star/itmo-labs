grammar ForLoop;

@lexer {
	FOR : "for" ;
	EQ : "==" ;
	INC : "\\+\\+" ;
	DEC : "--" ;
	LE : "<=" ;
	GE : ">=" ;
	GT : ">" ;
	LT : "<" ;
	LPAREN : "\\(" ;
	RPAREN : "\\)" ;
	SEMICOLON : ";" ;
	ASSIGN : "=" ;
	VAR : "[a-zA-Z_][a-zA-Z0-9_]*" ;
	NUM : "(\\+|-)?[0-9]+" ;
	_SKIP : "[ \t\r\n]+" ;
}

@parser {
	S() returns [String val]
	  : FOR{S0.val = "for";} LPAREN{S0.val += " (";} T(){S0.val += T3.val;} RPAREN{S0.val += ")";}
	  ;
	T() returns [String val]
	  : VAR{T0.val = VAR1.text();} VAR{T0.val += " " + VAR2.text();} ASSIGN{T0.val += " = ";} NUM{T0.val += NUM4.text();} SEMICOLON{T0.val += "; ";}
        C(){T0.val += C6.val;} SEMICOLON{T0.val += "; ";}
        H(){T0.val += H8.val;}
      ;
	C() returns [String val]
	  : VAR{C0.val = VAR1.text();} CMP(){C0.val += " " + CMP2.val + " ";} NUM{C0.val += NUM3.text();}
	  | NUM{C0.val = NUM1.text();} CMP(){C0.val += " " + CMP2.val + " ";} VAR{C0.val += VAR3.text();}
	  ;
	CMP() returns [String val]
	  : LT{CMP0.val = "<";}
	  | GT{CMP0.val = ">";}
	  | LE{CMP0.val = "<=";}
	  | GE{CMP0.val = ">=";}
	  | EQ{CMP0.val = "==";}
	  ;
	H() returns [String val]
	  : VAR{H0.val = VAR1.text();} SHIFT(){H0.val += SHIFT2.val;}
	  | SHIFT(){H0.val = SHIFT1.val;} VAR{H0.val += VAR2.text();}
	  ;
	SHIFT() returns [String val]
      : INC{SHIFT0.val = "++";}
      | DEC{SHIFT0.val = "--";}
      ;
}

@start : S val ;
