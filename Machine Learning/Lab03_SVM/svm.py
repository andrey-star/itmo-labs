import time

from mlxtend.plotting import plot_decision_regions
import matplotlib.pyplot as plt
from sklearn.base import BaseEstimator
import pandas as pd
import numpy as np
import math


def linearKernel(x, y):
    res = 0
    for i in range(len(x)):
        res += x[i] * y[i]
    return res


def polyKernel(x, y, d=5):
    return (linearKernel(x, y) + 1) ** d


def rbfKernel(x, y, gamma=2):
    diff = []
    for i in range(len(x)):
        diff.append(x[i] - y[i])
    return math.exp(-gamma * (linearKernel(diff, diff) ** 2))


def pred(x, model):
    res = 0
    for j in range(len(xs)):
        res += model['lam'][j] * (1 if ys[j] == 1 else -1) * model['kernel'](x, xs[j])
    return res + model['b']


class MySVC(BaseEstimator):
    def __init__(self, model):
        self.model = model

    def predict(self, x):
        a = np.zeros(len(x))
        start = time.time()
        for i in range(x.shape[0]):
            if i % 10000 == 0:
                end = time.time()
                print(i, '/', len(x), end - start)
                start = time.time()
            if pred(x[i], self.model) > 0:
                a[i] = 1
            else:
                a[i] = 0
        return a


filename = 'dataset/geyser_pandas.csv'
# filename = 'dataset/chips_pandas.csv'
dataset = pd.read_csv(filename)
xs = dataset.iloc[:, 0:2].to_numpy()
ys = dataset.iloc[:, 2:3].to_numpy()
ys = np.concatenate(ys).ravel()
for i, label in enumerate(ys):
    ys[i] = 1 if (label == 'P') else 0
print(xs)
print(ys)

linear = {
    'lam': [0.0, -1.338989683019598E-17, 1.0, 0.0, 1.0, 0.0, 0.836070819361375, 0.0, 3.176712365382528E-17, 0.0, 0.0,
            0.0,
            1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 6.396792817664476E-18, 0.0, 1.951563910473908E-18, 1.0,
            4.4557321157365215E-17, -2.528901567322439E-17, 0.0, 5.551115123125783E-17, 0.0, 0.0, 0.6092710273194283,
            0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9999999999999999, 0.0, 1.0, 1.0, 1.0, 1.0, 0.17858103941743422,
            0.10907279942062938, 0.227900169738573, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.1519648082658485E-18, 0.0,
            0.0,
            0.0, 1.0, 0.0, 0.0, 1.0, 0.0, -2.1684043449710089E-19, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0,
            0.0,
            0.0, -9.107298248878237E-18, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, -5.204170427930421E-18, -4.3368086899420177E-19,
            0.0,
            -2.0816681711721685E-17, 0.0, 0.0, 0.2046846210953689, 2.0816681711721685E-17, 0.0, 0.0, 0.0, 0.0,
            -5.377642775528102E-17, 1.0, 0.0, 0.0011453382776545062, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.1681705570283886, 0.0, 9.540979117872439E-18, 0.0, 0.0, 0.0, 0.0, 5.13422477566971E-4,
            -2.6359665318553827E-17,
            0.0, 3.0899761915836876E-18, 1.0, 0.0, 1.3010426069826053E-17, 0.0, 1.0, 1.0, 1.0, 1.1546753136970622E-17,
            0.4613608832687939, 0.0, 0.9999999999999999, 1.0, 1.0, 0.0, -2.6834003769016235E-17, 0.0, 0.0, 0.0, 0.0,
            0.0,
            1.0, 1.0, 0.6181078333247668, 0.0, 0.0, 1.0, 1.8323016715005025E-17, 0.0, 0.0, 0.0, -5.421010862427522E-19,
            0.0,
            1.0, 0.0, 0.0, 0.0, 0.0, -4.3368086899420177E-19, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            -8.673617379884035E-19, 0.0, 1.5395670849294163E-17, 0.0, 1.0, 4.840115667200523E-17, 1.0, 0.0, 1.0, 0.0,
            0.0,
            1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -3.0357660829594124E-18, 0.0, 0.0, 5.204170427930421E-18, 0.0,
            6.505213034913027E-19, 1.0, 1.702197410802242E-17, 0.0, 1.0, -5.204170427930421E-18,
            -4.3368086899420177E-19,
            1.0, 0.0, -2.905661822261152E-17, 0.0, 1.0, -2.168404344971009E-18, 0.479850948709274, 0.0, 0.0, 0.0,
            0.9981264171551392, 0.0, -8.239936510889834E-18, 1.0, 4.512991542970912E-18, 0.0, 0.0,
            -2.710505431213761E-20,
            0.0, 0.9988546617223454, 0.0, -3.2851325826310784E-17, -1.1275702593849246E-17], 'b': 4.052614509566234,
    'kernel': linearKernel}
rbf = {'lam': [0.01977991251255821, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.5, 0.23576555798903998, 0.0, 0.4298420842340854,
               0.49999999999999994, 0.5, 0.0, 0.5, 0.19243383843603695, 0.5, 0.5, 0.49999999999999994,
               0.2364226862615207, 0.5, 0.22967471599616063, 0.49999999999999994, 5.204170427930421E-18, 0.0, 0.0, 0.0,
               0.0, 0.0, 0.5, 0.0, 0.0, 0.16324762413455637, 0.43790796621404293, 0.5, 0.16656251147883055,
               0.08221859972234476, 0.0, 0.49999999999999994, 0.5, 0.0, 0.5, 0.5, 0.0, 0.49373609514296457,
               0.49875266041113187, 0.38564080508302007, 0.5, 0.5, 0.5, 0.0, 0.5, 0.5, 0.5, 0.0, 0.2934164898799998,
               0.0, -6.938893903907228E-18, 0.5, 0.432642953541034, 0.0, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.0,
               0.2584096349925292, 0.18822844573201375, 0.5, 0.5, 0.5, 0.14704119342853908, 0.49384026292597616, 0.0,
               -2.0816681711721685E-17, 0.0, 0.004631223503470043, 0.488923539854196, 0.5, 0.5, 0.4844936970683741, 0.0,
               -1.734723475976807E-18, 0.0, 0.0, 0.5, 0.0, 0.0, -2.7755575615628914E-17, 0.0, 0.09047284407940145,
               0.4999961664542241, 0.0, 0.0, 0.5, 0.23463866896481014, 0.5, 0.10421375237914898, 0.5, 0.0, 0.5, 0.0,
               0.23723695977390988, 0.5, 0.1415751672811385, 0.5, 0.13641959257917055, 0.0, 0.49999999999999994,
               0.24929518444386153, 0.1810726729024934, 0.46463394635006355, 0.5, 3.469446951953614E-18, 0.0, 0.0, 0.5,
               0.0, 0.0, 0.3830704411539268, 0.5, 0.5, 0.5, 0.0, 0.5, 0.42741449400552306, 0.5, 0.5, 0.5, 0.0, 0.5, 0.0,
               0.0, 0.3496661222616698, -2.7755575615628914E-17, 0.0, 0.5, 0.10225910280649692, 0.0, 0.5, 0.0,
               0.07417949510882986, 0.01959879887875049, 0.5, 0.1847703011344572, 0.158883147680127, 0.0, 0.0, 0.5, 0.0,
               0.0, 0.0, 0.2042421105449325, 0.05820781077048689, 0.0, 0.5, 0.49857749056111045, 0.0, 0.0, 0.5, 0.0,
               0.0, 0.5, 0.0, 0.3835360912235382, 0.47120503550924425, 0.0, -2.7755575615628914E-17, 0.0, 0.5, 0.5, 0.0,
               0.0, 0.5, 0.5, 0.0, 0.5, 0.5, 0.5, 0.0, 0.0, 0.5, 0.4964208923488077, 0.0, 0.2902451014429254,
               0.4669450585139565, 0.0, 0.0, 0.0, 0.0, 0.49990453884481495, 0.5, 0.0, 0.0, 0.5, 0.471433319135769, 0.5,
               0.5, 0.003361354684861425, 0.0, 0.0, 0.5, 0.5, 0.5, 7.293258223588613E-5, 0.5, 0.045420499703934525,
               0.49999999999999994, 0.5, 0.0, 0.5, 0.03012487593768755, 0.0, 0.017716614043320495, 0.0,
               0.0022911238053605876, 0.5, 0.058617169765685394, 0.5, 0.0], 'b': -0.1796988535500389,
       'kernel': rbfKernel}
poly = {'lam': [0.0, 3.478120569333498E-16, 0.0, -7.37257477290143E-16, 1.7763568394002505E-15, 0.0, 0.0, 50.0,
                9.46323655160579, 50.0, 50.0, 24.434196060920627, 0.0, 50.0, 38.956889136933334, 8.184857850180158, 0.0,
                50.0, -1.700029006457271E-16, 50.0, 50.0, 25.95288348403648, 50.0, 50.0, 50.00000000000001, 50.0, 0.0,
                50.0, 0.0, 18.280580127470117, 50.0, 6.603809850439045, 0.0, 0.0, 0.0, 2.8449465006019636E-15, 50.0,
                0.0, -5.377642775528102E-16, 0.0, 0.0, 0.0, 0.0, -2.9368868448287344E-15, 0.0, 0.0, 50.0,
                -6.279698983036042E-16, 50.0, 50.0, 0.0, 0.0, 3.712308238590367E-16, 0.0, 0.0, -8.760353553682876E-17,
                0.0, 1.4305755700679927, -1.734723475976807E-18, 50.0, 50.0, -8.838416110101832E-16, 0.0, 50.0,
                12.91789209210329, 1.5040052536718918E-15, 27.804354797401597, 0.0, -1.4502288259166107E-15, 0.0,
                -7.37257477290143E-16, 6.1401258331013935, 0.0, 17.876011333265936, 0.0, 50.0, 50.0, 50.0, 0.0,
                -1.3938503129473645E-15, 50.0, 50.0, -2.2724877535296173E-16, 50.0, -5.551115123125783E-17,
                13.873177082738735, 6.885237106507623, -7.494005416219807E-16, 50.0, 37.06554479959413, 0.0,
                34.51928948151253, 50.0, 0.04265956992712505, 14.63650886158149, 0.0, 1.6375789613221059E-15,
                -1.0842021724855044E-19, 0.0, 0.0, 0.0, -3.469446951953614E-18, -1.8561541192951836E-16, 0.0, 50.0,
                2.220446049250313E-16, 50.0, 50.0, 11.546227673920113, 0.0, 0.0, 0.0, 2.14064876935538E-15, 0.0,
                50.00000000000001, 5.204170427930421E-16, 0.0, 50.0], 'b': 2.0811581378498687, 'kernel': polyKernel}

svo = MySVC(rbf)
plot_decision_regions(xs, ys.astype(np.integer), clf=svo, legend=2)
plt.show()
